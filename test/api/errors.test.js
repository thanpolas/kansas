/**
 * @fileOverview Errors generated by Kansas.
 */
var chai = require('chai');
var expect = chai.expect;

var tester = require('../lib/tester');
var kansas = require('../..');

describe('Errors', function() {

  tester.initdb();

  it('Will produce a database error if redis credentials are wrong', function(done) {
    var api = kansas({
      redis: {
        host: 'troll',
        port: 0,
      },
      logging: true,
    });

    api.connect()
      .bind(this)
      .catch(function(err) {
        expect(err).to.be.instanceOf(this.kansas.error.Database);
        expect(err.type).to.equal(this.kansas.error.Database.Type.REDIS_CONNECTION);
      })
        .then(done, done);

  });

  describe('Token Create Errors', function () {
    it('will produce a Validation error if ownerId is not provided', function (done) {
      this.kansas.create({
        policyName: 'free',
      })
        .bind(this)
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.Validation);
        }).then(done, done);
    });
    it('will produce a Validation error if ownerId is empty string', function (done) {
      this.kansas.create({
        ownerId: '',
        policyName: 'free',
      })
        .bind(this)
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.Validation);
        }).then(done, done);
    });
    it('will produce a Policy error if policyName is not provided', function (done) {
      this.kansas.create({
        ownerId: 'hip',
      })
        .bind(this)
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.Policy);
        }).then(done, done);
    });
    it('will produce a Policy error if policyName does not exist', function (done) {
      this.kansas.create({
        ownerId: 'hip',
        policyName: 'troll',
      })
        .bind(this)
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.Policy);
        }).then(done, done);
    });
  });

  describe('Consume Errors', function () {
    it('will produce a TokenNotExists error when token does not exist', function (done) {
      this.kansas.consume('troll')
        .bind(this)
        .then(function() {
          done('Should not be here');
        })
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.TokenNotExists);
          done();
        })
        .catch(done);
    });
    it('will produce a UsageLimit error when limit is exceeded', function (done) {
      return this.kansas.consume(this.token, 10)
        .bind(this)
        .then(function() {
          return this.kansas.consume(this.token)
            .bind(this)
            .catch(function(err) {
              expect(err).to.be.instanceOf(this.kansas.error.UsageLimit);
              done();
            });
        })
        .catch(function(err) {
          done(err);
        });
    });
  });

  describe('Count Errors', function () {
    it('will produce a TokenNotExists error when token does not exist', function (done) {
      this.kansas.count('troll')
        .bind(this)
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.TokenNotExists);
        })
        .then(done, done);
    });
    it('will produce a TokenNotExists error even if token is used multiple times', function (done) {
      this.kansas.count('troll')
        .bind(this)
        .catch(function() {
          return this.kansas.count('troll')
            .bind(this)
            .then(function() {
              throw new Error('Should not allow API access');
            })
            .catch(function(err) {
              expect(err).to.be.instanceOf(this.kansas.error.TokenNotExists);
            });
        })
        .then(done, done);
    });
    it('will produce a TokenNotExists error even when consuming multiple units', function (done) {
      this.kansas.count('troll', 5)
        .bind(this)
        .catch(function(err) {
          expect(err).to.be.instanceOf(this.kansas.error.TokenNotExists);
        })
        .then(done, done);
    });
  });
});
